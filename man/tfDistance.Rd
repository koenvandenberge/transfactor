% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/allGenerics.R, R/tfDistance.R
\name{tfDistance}
\alias{tfDistance}
\alias{tfDistance,list,matrix,matrix,matrix-method}
\title{tfDistance}
\usage{
tfDistance(
  activity = "list",
  X = "matrix",
  counts = "matrix",
  U = "matrix",
  ...
)

\S4method{tfDistance}{list,matrix,matrix,matrix}(
  activity,
  X,
  counts,
  U,
  cellGroups = NULL,
  distance = "Euclidean",
  scaleDistance = FALSE,
  contrast = "consecutive",
  referenceGroup = NULL
)
}
\arguments{
\item{activity}{Estimated TF activity. The output from \code{\link{estimateActivity}}.}

\item{X}{Gene regulatory network of dimensions G x T.}

\item{counts}{Gene expression counts, of dimenstions G x n.}

\item{U}{Design matrix, of dimensions n x p. The design matrix should not
contain an intercept. This is the same design matrix provided to \code{\link{estimateActivity}}.}

\item{...}{parameters including:}

\item{cellGroups}{The columns of \code{U} to be compared, if a pairwise
comparison of sets of cells is of interest.}

\item{distance}{The distance function to use. Options are \code{"Euclidean"}
or \code{"L1"}. Defaults to \code{"Euclidean"}.}

\item{scaleDistance}{Logical. Should the distances be scaled?}

\item{contrast}{The contrast of interest. If \code{"consecutive"},
it tests each group versus the next (relevant for datasets with trajectories),
if \code{"reference"}, it tests one set of cells (defined via \code{referenceGroup})
versus all others.}

\item{referenceGroup}{If \code{contrast} is \code{"reference"}, \code{referenceGroup}
is the set of cells being compared to all others.}
}
\value{
A vector with distances for each TF.
}
\description{
Rank transcription factors based on a number of distance metrics
and contrasts.
}
\examples{
counts <- matrix(rpois(n= 1e4, lambda=4), nrow=100, ncol=100)
X <- matrix(0, nrow=100, ncol=12)
X[cbind(sample(100, size=250, replace=TRUE), sample(12, size=250, replace=TRUE))] <- 1
rownames(X) <- rownames(counts) <- paste0("gene",1:100)
act <- estimateActivity(counts, X)
ict <- rep(1, ncol(counts))
cellType <- factor(rep(c("a", "b"), each=50))
U <- model.matrix(~ -1 + cellType)
act <- estimateActivity(counts, X, U=U)
tfDist <- tfDistance(act, X, counts, U)
}
